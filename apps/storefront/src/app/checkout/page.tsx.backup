'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { useAuthStore } from '@/store/auth';
import { useCartStore } from '@/store/cart';
import { useAddressStore } from '@/store/address';
import { AddressForm } from '@/components/checkout/AddressForm';
import { OrderSummary } from '@/components/checkout/OrderSummary';
import { PaymentMethod } from '@/components/checkout/PaymentMethod';
import { ShippingMethod } from '@/components/checkout/ShippingMethod';
import { ordersService } from '@repo/api';
import type { AddressForm as AddressFormType, UserAddress } from '@repo/types';

// Define the correct API request type based on backend
interface CreateOrderRequest {
  shipping_address: {
    first_name: string;
    last_name: string;
    company?: string;
    address_line_1: string;
    address_line_2?: string;
    city: string;
    state: string;
    postal_code: string;
    country: string;
    phone?: string;
  };
  billing_address?: {
    first_name: string;
    last_name: string;
    company?: string;
    address_line_1: string;
    address_line_2?: string;
    city: string;
    state: string;
    postal_code: string;
    country: string;
    phone?: string;
  };
  shipping_method: string;
  payment_method: string;
  notes?: string;
  coupon_code?: string;
  use_shipping_as_billing: boolean;
}

export default function CheckoutPage() {
  const router = useRouter();
  const { isAuthenticated, user } = useAuthStore();
  const { cartData, isLoading: cartLoading, fetchCart, clearCart } = useCartStore();
  const { addresses, isLoading: addressLoading, fetchAddresses, createAddress } = useAddressStore();

  // Checkout state
  const [currentStep, setCurrentStep] = useState(1);
  const [isPlacingOrder, setIsPlacingOrder] = useState(false);
  const [error, setError] = useState('');

  // Address management
  const [selectedShippingAddress, setSelectedShippingAddress] = useState<UserAddress | null>(null);
  const [selectedBillingAddress, setSelectedBillingAddress] = useState<UserAddress | null>(null);
  const [useShippingAsBilling, setUseShippingAsBilling] = useState(true);
  const [showNewShippingForm, setShowNewShippingForm] = useState(false);
  const [showNewBillingForm, setShowNewBillingForm] = useState(false);

  // Other form data
  const [shippingMethod, setShippingMethod] = useState('standard');
  const [shippingCost, setShippingCost] = useState(0);
  const [paymentMethod, setPaymentMethod] = useState('razorpay');
  const [notes, setNotes] = useState('');
  const [couponCode, setCouponCode] = useState('');

  useEffect(() => {
    if (isAuthenticated) {
      fetchCart();
      fetchAddresses();
    }
  }, [isAuthenticated, fetchCart, fetchAddresses]);

  // Auto-select default shipping address
  useEffect(() => {
    if (addresses.length > 0 && !selectedShippingAddress) {
      const defaultAddress = addresses.find(addr => addr.is_default) || addresses[0];
      setSelectedShippingAddress(defaultAddress);
      if (useShippingAsBilling) {
        setSelectedBillingAddress(defaultAddress);
      }
    }
  }, [addresses, selectedShippingAddress, useShippingAsBilling]);

  // Redirect if not authenticated
  if (!isAuthenticated) {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Checkout</h1>
          <div className="bg-blue-50 border border-blue-200 text-blue-700 px-4 py-3 rounded">
            <p>Please sign in to continue with checkout.</p>
            <Link href="/login" className="font-medium text-blue-600 hover:text-blue-500 ml-1">
              Sign in here
            </Link>
          </div>
        </div>
      </div>
    );
  }

  // Redirect if cart is empty
  if (!cartLoading && (!cartData || !cartData.items || cartData.items.length === 0)) {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Checkout</h1>
          <div className="bg-yellow-50 border border-yellow-200 text-yellow-700 px-4 py-3 rounded">
            <p>Your cart is empty. Add some products before checking out.</p>
            <Link href="/products" className="font-medium text-blue-600 hover:text-blue-500 ml-1">
              Continue shopping
            </Link>
          </div>
        </div>
      </div>
    );
  }

  // Handle new shipping address
  const handleNewShippingAddress = async (addressData: AddressFormType) => {
    try {
      console.log('Creating new shipping address:', addressData);
      const newAddress = await createAddress(addressData);
      console.log('New shipping address created:', newAddress);
      setSelectedShippingAddress(newAddress);
      setShowNewShippingForm(false);
      if (useShippingAsBilling) {
        setSelectedBillingAddress(newAddress);
      }
    } catch (error) {
      console.error('Failed to create shipping address:', error);
      setError('Failed to save shipping address. Please try again.');
    }
  };

  // Handle new billing address
  const handleNewBillingAddress = async (addressData: AddressFormType) => {
    try {
      console.log('Creating new billing address:', addressData);
      const newAddress = await createAddress(addressData);
      console.log('New billing address created:', newAddress);
      setSelectedBillingAddress(newAddress);
      setShowNewBillingForm(false);
    } catch (error) {
      console.error('Failed to create billing address:', error);
      setError('Failed to save billing address. Please try again.');
    }
  };

  // Convert UserAddress to API address format
  const convertAddressForAPI = (address: UserAddress) => ({
    first_name: address.first_name,
    last_name: address.last_name,
    company: address.company || undefined,
    address_line_1: address.address_line_1,
    address_line_2: address.address_line_2 || undefined,
    city: address.city,
    state: address.state,
    postal_code: address.postal_code,
    country: address.country,
    phone: address.phone || undefined,
  });

  // Handle order placement with proper API integration
  const handlePlaceOrder = async () => {
    if (!selectedShippingAddress || !cartData) {
      setError('Please select a shipping address.');
      return;
    }

    const finalBillingAddress = useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress;
    if (!finalBillingAddress) {
      setError('Please select a billing address.');
      return;
    }

    setIsPlacingOrder(true);
    setError('');

    try {
      // Prepare order data in the correct format for the backend API
      const orderData: CreateOrderRequest = {
        shipping_address: convertAddressForAPI(selectedShippingAddress),
        billing_address: convertAddressForAPI(finalBillingAddress),
        shipping_method: shippingMethod,
        payment_method: paymentMethod,
        notes: notes.trim() || undefined,
        coupon_code: couponCode.trim() || undefined,
        use_shipping_as_billing: useShippingAsBilling,
      };

      console.log('üöÄ Creating order with data:', orderData);
      
      // Call the backend API
      const response = await ordersService.createOrder(orderData);
      console.log('‚úÖ Order creation response:', response);

      // Handle the response based on your backend API structure
      let orderId;
      if (response.data && response.data.id) {
        orderId = response.data.id;
      } else if (response.id) {
        orderId = response.id;
      } else {
        throw new Error('Invalid order response: missing order ID');
      }

      console.log('‚úÖ Order created successfully with ID:', orderId);

      // Clear cart after successful order
      try {
        await clearCart();
        console.log('‚úÖ Cart cleared successfully');
      } catch (cartError) {
        console.warn('‚ö†Ô∏è Failed to clear cart, but order was created:', cartError);
      }

      // Redirect based on payment method
      if (paymentMethod === 'cod') {
        // For COD, redirect to order confirmation
        router.push(`/orders/${orderId}/confirmation`);
      } else {
        // For online payments, redirect to payment page
        router.push(`/orders/${orderId}/payment`);
      }
    } catch (err: any) {
      console.error('‚ùå Failed to place order:', err);
      
      // Handle different types of errors
      let errorMessage = 'Failed to place order. Please try again.';
      
      if (err.response) {
        // HTTP error response
        const status = err.response.status;
        const data = err.response.data;
        
        console.error('‚ùå HTTP Error:', { status, data });
        
        if (status === 400 && data.error) {
          errorMessage = data.error;
        } else if (status === 401) {
          errorMessage = 'Please login to continue.';
        } else if (status === 422 && data.details) {
          errorMessage = `Validation error: ${data.details}`;
        } else if (data.message) {
          errorMessage = data.message;
        }
      } else if (err.message) {
        errorMessage = err.message;
      }
      
      setError(errorMessage);
    } finally {
      setIsPlacingOrder(false);
    }
  };

  const steps = [
    { id: 1, name: 'Shipping Address', icon: 'üìç' },
    { id: 2, name: 'Billing Address', icon: 'üí≥' },
    { id: 3, name: 'Shipping & Payment', icon: 'üöö' },
    { id: 4, name: 'Review Order', icon: 'üìã' },
  ];

  if (cartLoading || addressLoading) {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded mb-4"></div>
          <div className="h-64 bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <h1 className="text-2xl font-bold text-gray-900 mb-8">Checkout</h1>

      {error && (
        <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded mb-6">
          <div className="flex justify-between items-center">
            <span>{error}</span>
            <button 
              onClick={() => setError('')}
              className="ml-2 text-red-500 hover:text-red-700 text-lg font-bold"
            >
              √ó
            </button>
          </div>
        </div>
      )}

      <div className="lg:grid lg:grid-cols-12 lg:gap-x-12 lg:items-start xl:gap-x-16">
        {/* Main Content */}
        <div className="lg:col-span-7">
          {/* Progress Steps */}
          <div className="mb-8">
            <div className="flex items-center justify-between">
              {steps.map((step, stepIdx) => (
                <div key={step.id} className={`flex items-center ${stepIdx < steps.length - 1 ? 'flex-1' : ''}`}>
                  <div
                    className={`flex items-center justify-center w-10 h-10 rounded-full text-sm font-medium ${
                      currentStep >= step.id
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-200 text-gray-500'
                    }`}
                  >
                    <span className="text-lg">{step.icon}</span>
                  </div>
                  <div className="ml-4 min-w-0 flex-1">
                    <p className={`text-sm font-medium ${
                      currentStep >= step.id ? 'text-blue-600' : 'text-gray-500'
                    }`}>
                      {step.name}
                    </p>
                  </div>
                  {stepIdx < steps.length - 1 && (
                    <div className={`flex-1 ml-4 h-0.5 ${
                      currentStep > step.id ? 'bg-blue-600' : 'bg-gray-200'
                    }`} />
                  )}
                </div>
              ))}
            </div>
          </div>

          {/* Step 1: Shipping Address */}
          {currentStep === 1 && (
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex justify-between items-center mb-6">
                <h2 className="text-lg font-medium text-gray-900">Shipping Address</h2>
                <button
                  onClick={() => setShowNewShippingForm(!showNewShippingForm)}
                  className="text-sm text-blue-600 hover:text-blue-500"
                >
                  {showNewShippingForm ? 'Cancel' : '+ Add New Address'}
                </button>
              </div>

              {/* New Address Form */}
              {showNewShippingForm && (
                <div className="mb-6 p-4 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
                  <h3 className="text-md font-medium text-gray-900 mb-4">Add New Shipping Address</h3>
                  <AddressForm
                    onSubmit={handleNewShippingAddress}
                    onCancel={() => setShowNewShippingForm(false)}
                    submitLabel="Save & Use This Address"
                    isLoading={addressLoading}
                  />
                </div>
              )}

              {/* Existing Addresses */}
              {addresses.length > 0 && (
                <div className="space-y-4 mb-6">
                  <h3 className="text-md font-medium text-gray-900">Select from saved addresses:</h3>
                  {addresses.map((address) => (
                    <div
                      key={address.id}
                      className={`p-4 border rounded-lg cursor-pointer transition-colors ${
                        selectedShippingAddress?.id === address.id
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                      onClick={() => {
                        setSelectedShippingAddress(address);
                        if (useShippingAsBilling) {
                          setSelectedBillingAddress(address);
                        }
                      }}
                    >
                      <div className="flex items-center mb-2">
                        <input
                          type="radio"
                          checked={selectedShippingAddress?.id === address.id}
                          onChange={() => {}}
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                        />
                        <span className="ml-3 text-sm font-medium text-gray-900">
                          {address.first_name} {address.last_name}
                          {address.is_default && (
                            <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                              Default
                            </span>
                          )}
                        </span>
                      </div>
                      <div className="ml-7 space-y-1 text-sm text-gray-600">
                        {address.company && <p>{address.company}</p>}
                        <p>{address.address_line_1}</p>
                        {address.address_line_2 && <p>{address.address_line_2}</p>}
                        <p>{address.city}, {address.state} {address.postal_code}</p>
                        <p>{address.country}</p>
                        {address.phone && <p>Phone: {address.phone}</p>}
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {addresses.length === 0 && !showNewShippingForm && (
                <div className="text-center py-6">
                  <p className="text-gray-500 mb-4">No saved addresses found.</p>
                  <button
                    onClick={() => setShowNewShippingForm(true)}
                    className="btn-primary px-4 py-2"
                  >
                    Add Shipping Address
                  </button>
                </div>
              )}

              {selectedShippingAddress && (
                <div className="flex justify-end">
                  <button
                    onClick={() => setCurrentStep(2)}
                    className="btn-primary px-6 py-2"
                  >
                    Continue to Billing
                  </button>
                </div>
              )}
            </div>
          )}

          {/* Step 2: Billing Address */}
          {currentStep === 2 && (
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-6">Billing Address</h2>

              {/* Use shipping as billing option */}
              <div className="mb-6">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    checked={useShippingAsBilling}
                    onChange={(e) => {
                      setUseShippingAsBilling(e.target.checked);
                      if (e.target.checked) {
                        setSelectedBillingAddress(selectedShippingAddress);
                        setShowNewBillingForm(false);
                      }
                    }}
                    className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  />
                  <span className="ml-2 text-sm text-gray-900">
                    Use shipping address as billing address
                  </span>
                </label>
              </div>

              {!useShippingAsBilling && (
                <>
                  <div className="flex justify-between items-center mb-6">
                    <h3 className="text-md font-medium text-gray-900">Select Billing Address</h3>
                    <button
                      onClick={() => setShowNewBillingForm(!showNewBillingForm)}
                      className="text-sm text-blue-600 hover:text-blue-500"
                    >
                      {showNewBillingForm ? 'Cancel' : '+ Add New Address'}
                    </button>
                  </div>

                  {/* New Billing Address Form */}
                  {showNewBillingForm && (
                    <div className="mb-6 p-4 bg-gray-50 rounded-lg border-2 border-dashed border-gray-300">
                      <h3 className="text-md font-medium text-gray-900 mb-4">Add New Billing Address</h3>
                      <AddressForm
                        onSubmit={handleNewBillingAddress}
                        onCancel={() => setShowNewBillingForm(false)}
                        submitLabel="Save & Use This Address"
                        isLoading={addressLoading}
                      />
                    </div>
                  )}

                  {/* Existing Addresses for Billing */}
                  {addresses.length > 0 && !showNewBillingForm && (
                    <div className="space-y-4 mb-6">
                      {addresses.map((address) => (
                        <div
                          key={address.id}
                          className={`p-4 border rounded-lg cursor-pointer transition-colors ${
                            selectedBillingAddress?.id === address.id
                              ? 'border-blue-500 bg-blue-50'
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                          onClick={() => setSelectedBillingAddress(address)}
                        >
                          <div className="flex items-center mb-2">
                            <input
                              type="radio"
                              checked={selectedBillingAddress?.id === address.id}
                              onChange={() => {}}
                              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300"
                            />
                            <span className="ml-3 text-sm font-medium text-gray-900">
                              {address.first_name} {address.last_name}
                              {address.is_default && (
                                <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                  Default
                                </span>
                              )}
                            </span>
                          </div>
                          <div className="ml-7 space-y-1 text-sm text-gray-600">
                            {address.company && <p>{address.company}</p>}
                            <p>{address.address_line_1}</p>
                            {address.address_line_2 && <p>{address.address_line_2}</p>}
                            <p>{address.city}, {address.state} {address.postal_code}</p>
                            <p>{address.country}</p>
                            {address.phone && <p>Phone: {address.phone}</p>}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </>
              )}

              <div className="flex justify-between">
                <button
                  onClick={() => setCurrentStep(1)}
                  className="btn-outline px-6 py-2"
                >
                  Back
                </button>
                <button
                  onClick={() => setCurrentStep(3)}
                  className="btn-primary px-6 py-2"
                  disabled={!useShippingAsBilling && !selectedBillingAddress}
                >
                  Continue to Shipping
                </button>
              </div>
            </div>
          )}

          {/* Step 3: Shipping & Payment */}
          {currentStep === 3 && (
            <div className="space-y-6">
              <div className="bg-white rounded-lg shadow p-6">
                <ShippingMethod
                  selectedMethod={shippingMethod}
                  onMethodChange={setShippingMethod}
                  onCostChange={setShippingCost}
                />
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <PaymentMethod
                  selectedMethod={paymentMethod}
                  onMethodChange={setPaymentMethod}
                />
              </div>

              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Order Notes (Optional)</h3>
                <textarea
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  placeholder="Special instructions for your order..."
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                />
              </div>

              {/* Coupon Code Section */}
              <div className="bg-white rounded-lg shadow p-6">
                <h3 className="text-lg font-medium text-gray-900 mb-4">Coupon Code (Optional)</h3>
                <div className="flex space-x-3">
                  <input
                    type="text"
                    value={couponCode}
                    onChange={(e) => setCouponCode(e.target.value)}
                    placeholder="Enter coupon code"
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                  />
                  <button className="btn-outline px-4 py-2">
                    Apply
                  </button>
                </div>
              </div>

              <div className="flex justify-between">
                <button
                  onClick={() => setCurrentStep(2)}
                  className="btn-outline px-6 py-2"
                >
                  Back
                </button>
                <button
                  onClick={() => setCurrentStep(4)}
                  className="btn-primary px-6 py-2"
                >
                  Review Order
                </button>
              </div>
            </div>
          )}

          {/* Step 4: Review Order */}
          {currentStep === 4 && (
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-medium text-gray-900 mb-6">Review Your Order</h2>

              {/* Address Summary */}
              <div className="mb-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Shipping Address */}
                  <div>
                    <h3 className="text-sm font-medium text-gray-900 mb-3">Shipping Address</h3>
                    {selectedShippingAddress && (
                      <div className="text-sm text-gray-600 space-y-1">
                        <p className="font-medium text-gray-900">
                          {selectedShippingAddress.first_name} {selectedShippingAddress.last_name}
                        </p>
                        {selectedShippingAddress.company && <p>{selectedShippingAddress.company}</p>}
                        <p>{selectedShippingAddress.address_line_1}</p>
                        {selectedShippingAddress.address_line_2 && <p>{selectedShippingAddress.address_line_2}</p>}
                        <p>{selectedShippingAddress.city}, {selectedShippingAddress.state} {selectedShippingAddress.postal_code}</p>
                        <p>{selectedShippingAddress.country}</p>
                        {selectedShippingAddress.phone && <p>Phone: {selectedShippingAddress.phone}</p>}
                      </div>
                    )}
                    <button
                      onClick={() => setCurrentStep(1)}
                      className="mt-2 text-sm text-blue-600 hover:text-blue-500"
                    >
                      Edit
                    </button>
                  </div>

                  {/* Billing Address */}
                  <div>
                    <h3 className="text-sm font-medium text-gray-900 mb-3">Billing Address</h3>
                    {(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress) && (
                      <div className="text-sm text-gray-600 space-y-1">
                        {useShippingAsBilling && (
                          <p className="text-xs text-blue-600 mb-2">Same as shipping address</p>
                        )}
                        <p className="font-medium text-gray-900">
                          {(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.first_name}{' '}
                          {(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.last_name}
                        </p>
                        {(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.company && 
                          <p>{(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.company}</p>}
                        <p>{(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.address_line_1}</p>
                        {(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.address_line_2 && 
                          <p>{(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.address_line_2}</p>}
                        <p>
                          {(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.city},{' '}
                          {(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.state}{' '}
                          {(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.postal_code}
                        </p>
                        <p>{(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.country}</p>
                        {(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.phone && 
                          <p>Phone: {(useShippingAsBilling ? selectedShippingAddress : selectedBillingAddress)?.phone}</p>}
                      </div>
                      </div>
                    )}
                    <button
                      onClick={() => setCurrentStep(2)}
                      className="mt-2 text-sm text-blue-600 hover:text-blue-500"
                    >
                      Edit
                    </button>
                  </div>
                </div>
              </div>

              {/* Shipping and Payment Summary */}
              <div className="border-t border-gray-200 pt-6 mb-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h3 className="text-sm font-medium text-gray-900 mb-3">Shipping Method</h3>
                    <p className="text-sm text-gray-600 capitalize">{shippingMethod.replace('_', ' ')}</p>
                    <button
                      onClick={() => setCurrentStep(3)}
                      className="mt-2 text-sm text-blue-600 hover:text-blue-500"
                    >
                      Edit
                    </button>
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-900 mb-3">Payment Method</h3>
                    <p className="text-sm text-gray-600 capitalize">{paymentMethod}</p>
                    <button
                      onClick={() => setCurrentStep(3)}
                      className="mt-2 text-sm text-blue-600 hover:text-blue-500"
                    >
                      Edit
                    </button>
                  </div>
                </div>
              </div>

              {/* Order Notes */}
              {notes && (
                <div className="border-t border-gray-200 pt-6 mb-6">
                  <h3 className="text-sm font-medium text-gray-900 mb-3">Order Notes</h3>
                  <p className="text-sm text-gray-600">{notes}</p>
                  <button
                    onClick={() => setCurrentStep(3)}
                    className="mt-2 text-sm text-blue-600 hover:text-blue-500"
                  >
                    Edit
                  </button>
                </div>
              )}

              {/* Coupon Code */}
              {couponCode && (
                <div className="border-t border-gray-200 pt-6 mb-6">
                  <h3 className="text-sm font-medium text-gray-900 mb-3">Coupon Code</h3>
                  <p className="text-sm text-green-600">{couponCode}</p>
                  <button
                    onClick={() => setCurrentStep(3)}
                    className="mt-2 text-sm text-blue-600 hover:text-blue-500"
                  >
                    Edit
                  </button>
                </div>
              )}

              <div className="flex justify-between border-t border-gray-200 pt-6">
                <button
                  onClick={() => setCurrentStep(3)}
                  className="btn-outline px-6 py-2"
                  disabled={isPlacingOrder}
                >
                  Back
                </button>
                <button
                  onClick={handlePlaceOrder}
                  disabled={isPlacingOrder}
                  className="btn-primary px-8 py-2 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {isPlacingOrder ? (
                    <span className="flex items-center">
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Placing Order...
                    </span>
                  ) : (
                    'Place Order'
                  )}
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Order Summary Sidebar */}
        <div className="mt-10 lg:mt-0 lg:col-span-5">
          <div className="bg-white rounded-lg shadow p-6 sticky top-4">
            <OrderSummary 
              cartData={cartData}
              shippingCost={shippingCost}
            />
          </div>
        </div>
      </div>
    </div>
  );
}
